mod ffi {
    // NOTE: See build.rs on the "dest_src_name" and make sure it matches this
    //      /* automatically generated by rust-bindgen 0.69.4 */
    //
    //      extern "C" {
    //          pub fn mid_exit(status: ::std::os::raw::c_int);
    //      }
    //      extern "C" {
    //          pub fn mid_access_violation();
    //      }
    //      extern "C" {
    //          pub fn mid_divide_by_zero();
    //      }
    include!(concat!(env!("OUT_DIR"), "/bindings.rs"));
}

fn main() {
    // Output (same on both Linux and Windows):
    //      do_proc_exit(0): About to call mid_exit() from C library
    //      mid_exit(): Calling exit() now...
    do_proc_exit();

    // Output (Linux):
    //      do_div_by_zero(0): About to call mid_divide_by_zero() from C library
    //      mid_divide_by_zero(): about to divide by zero...
    //      mid_divide_by_zero(): This WILL print - In C/C++ NaN and INF are valid answer...
    //      do_div_by_zero(1): mid_divide_by_zero() from C library called successfully
    // Output (Windows):
    //      do_div_by_zero(0): About to call mid_divide_by_zero() from C library
    //      mid_divide_by_zero(): about to divide by zero...
    //      error: process didn't exit successfully: `rust-demo\target\debug\calling_bad_Clibraries.exe` (exit code: 0xc0000094, STATUS_INTEGER_DIVIDE_BY_ZERO)
    do_div_by_zero();

    // Output (Linux):
    //      do_seg_fault(0): About to call mid_access_violation() from C library
    //      mid_access_violation(): about to write some value to NULL pointer; seg-fault here we come...
    //      Segmentation fault (core dumped)
    // Output (Windows):
    //      do_seg_fault(0): About to call mid_access_violation() from C library
    //      mid_access_violation(): about to write some value to NULL pointer; seg-fault here we come...
    //      error: process didn't exit successfully: `rust-demo\target\debug\calling_bad_Clibraries.exe` (exit code: 0xc0000005, STATUS_ACCESS_VIOLATION)
    //      Segmentation fault
    do_seg_fault();
}

fn do_proc_exit() {
    println!("do_proc_exit(0): About to call mid_exit() from C library");
    let status = -666;
    unsafe {
        ffi::mid_exit(status);
    }
    println!("do_proc_exit(1): mid_exit() from C library called successfully");
}

fn do_div_by_zero() {
    println!("do_div_by_zero(0): About to call mid_divide_by_zero() from C library");
    unsafe {
        ffi::mid_divide_by_zero();
    }
    println!("do_div_by_zero(1): mid_divide_by_zero() from C library called successfully");
}

fn do_seg_fault() {
    // access the C function from the generated bindings
    println!("do_seg_fault(0): About to call mid_access_violation() from C library");
    unsafe {
        ffi::mid_access_violation();
    }
    println!("do_seg_fault(1): mid_access_violation() from C library called successfully");
}
